// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ------------------ Enums (Cartões) ------------------
 */

enum CardType {
  DEBIT
  CREDIT
}

enum CardStatus {
  ACTIVE
  BLOCKED
  CANCELED
}

/**
 * ------------------ Models ------------------
 */

model User {
  id           String   @id @default(cuid())
  name         String
  cpf          String   @unique
  passwordHash String
  createdAt    DateTime @default(now())

  account Account?
}

model Account {
  id        String   @id @default(cuid())
  agency    String
  number    String   @unique
  balance   Int      @default(0) // em centavos
  ownerId   String   @unique
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  // Transações (duas pontas)
  txsFrom Transaction[] @relation("TxFrom")
  txsTo   Transaction[] @relation("TxTo")

  // Cartões
  cards     Card[]
  positions InvestmentPosition[]
}

model Transaction {
  id        String   @id @default(cuid())
  kind      String // "DEPOSIT" | "WITHDRAW" | "TRANSFER"
  amount    Int
  createdAt DateTime @default(now())
  note      String?

  // from/to (opcional, ex.: depósito só tem 'to', saque só tem 'from')
  fromId String?
  toId   String?
  from   Account? @relation("TxFrom", fields: [fromId], references: [id])
  to     Account? @relation("TxTo", fields: [toId], references: [id])

  @@index([fromId])
  @@index([toId])
}

model Card {
  id String @id @default(cuid())

  accountId String
  account   Account @relation(fields: [accountId], references: [id])

  type       CardType
  isVirtual  Boolean  @default(false)
  brand      String   @default("VISA") // DEMO
  holderName String

  // Segurança: não armazenamos PAN real; apenas token e last4
  last4    String
  panToken String

  expMonth Int
  expYear  Int

  status CardStatus @default(ACTIVE)

  // Somente para crédito
  creditLimit     Int? // centavos
  availableCredit Int? // centavos

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([accountId])
  @@index([status])
  @@index([type])
}

model InvestmentProduct {
  id               String   @id @default(cuid())
  code             String   @unique
  name             String
  description      String
  // taxa por minuto em ppm (parts per million). Ex.: 800 ppm = 0.08% por minuto
  minuteRatePpm    Int
  minAmountCents   Int      @default(1000) // R$ 10,00
  liquidityMinutes Int      @default(0) // 0 = liquidez imediata
  createdAt        DateTime @default(now())

  positions InvestmentPosition[]
}

model InvestmentPosition {
  id             String    @id @default(cuid())
  accountId      String
  productId      String
  principalCents Int
  openedAt       DateTime  @default(now())
  status         String    @default("ACTIVE") // ACTIVE | CLOSED
  closedAt       DateTime?
  redeemedCents  Int? // valor recebido no resgate

  account Account           @relation(fields: [accountId], references: [id], onDelete: Cascade)
  product InvestmentProduct @relation(fields: [productId], references: [id], onDelete: Restrict)

  @@index([accountId])
  @@index([productId])
}
